Git Commands
===================

How to Check the Status of Your Files:
-------------------------------------------

My Git Machine $ echo "Happy New Year" > NewYearFile.txt
My Git Machine $ ls
NewYearFile.txt
My Git Machine $ cat NewYearFile.txt
Happy New Year
My Git Machine $
My Git Machine $
My Git Machine $ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        NewYearFile.txt

nothing added to commit but untracked files present (use "git add" to track)
 My Git Machine $

As we can see that your new NewYearFile.txt file is untracked, because it’s under the “Untracked files” heading in your status output. 

What is the Untracked means:
Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit), and which hasn’t yet been staged.
Git won’t start including it in your commit snapshots until you explicitly tell it to do so. 

Why Git behave like this?
It does this so you don’t accidentally begin including generated binary files or other files that you did not mean to include. You do want to start including NewYearFile.txt, so let’s start tracking the file.

How to Track the New Files
-------------------------------

In order to begin tracking a new file, you use the command git add. To begin tracking the NewYearFile.txt file, you can run this:

My Git Machine $
My Git Machine $ git add NewYearFile.txt

If you run your status command again, you can see that your NewYearFile.txt file is now tracked and staged to be committed:

My Git Machine $  git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   NewYearFile.txt

My Git Machine $


As we can see that NewYearFile.txt file is staged because it’s under the “Changes to be committed” heading. 

Committing Your Changes
----------------------------

The stage area is set up, now we can commit our changes. 

NOTE: If at this point you have any thing that is unstaged, I'm talking about any file that you've created or modified and you haven’t run git add on since you edited them  won’t go into this commit. 

My Git Machine $ git commit -m "New File Added"
[master (root-commit) 8d83d5a] New File Added
 1 file changed, 1 insertion(+)
 create mode 100644 NewYearFile.txt
My Git Machine $
My Git Machine $ git status
On branch master
nothing to commit, working tree clean
My Git Machine $

Now you’ve created your first commit! 

You can see that the commit has given you some output about itself: which branch you committed to (master), what SHA-1 checksum the commit has (8d83d5a), how many files were changed, and statistics about lines added and removed in the commit.

What commit does: 
Commit records the snapshot you set up in your staging area. Anything you didn’t stage is still sitting there modified.

How to Stage and commit the Modified Files
-------------------------------------------



Removing Files
---------------
In order to remove a file fro git:
First remove it from your tracked files i.e. remove it from your staging area and then commit. 
The git rm command does that, and also removes the file from your working directory 
so you don’t see it as an untracked file the next time around.

My Git Machine $ git status
On branch master
nothing to commit, working tree clean
My Git Machine $
My Git Machine $ ls
a.py
My Git Machine $ rm a.py
My Git Machine $
My Git Machine $ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    a.py

no changes added to commit (use "git add" and/or "git commit -a")
My Git Machine $ git rm a.py
rm 'a.py'
My Git Machine $
My Git Machine $ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        deleted:    a.py

My Git Machine $ git commit -m "Deleted a.py file"
[master 2818f4b] Deleted a.py file
 1 file changed, 1 deletion(-)
 delete mode 100644 a.py
My Git Machine $

My Git Machine $ git status
On branch master
nothing to commit, working tree clean
My Git Machine $

My Git Machine $ ls
My Git Machine $

Here as you can see that file alos got deleted from the Drive I.E. OS level as well.
WHat about if you may want to keep the file on your hard drive but not have Git track it anymore. 
Something like a large log file, that you forgot to your .gitignore file and accidentally staged it. 

$ git rm --cached <File_Name>

What is the difference between :
"git rm --cached <file_name>" vs "git reset head -- <File_Name>"?

git rm will remove entries from the staging area. 
This is a bit different from git reset HEAD which "unstages" files. 
By "unstage" I mean it reverts the staging area to what was there before we started modifying things.
However the  git rm on the other hand just kicks the file off the stage entirely, so that it's not included 
in the next commit snapshot, thereby effectively deleting it.

Moving Files
--------------
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file. 
$ git mv file_from file_to

My Git Machine $ git status
On branch master
nothing to commit, working tree clean
My Git Machine $
My Git Machine $ git ls-tree -r master --name-only
.gitignore
old_file
My Git Machine $
My Git Machine $ git mv old_file New_file
My Git Machine $
My Git Machine $ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        renamed:    old_file -> New_file

My Git Machine $ git commit -m "Rename the file"
[master 816d68d] Rename the file
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename old_file => New_file (100%)
My Git Machine $
My Git Machine $ git status
On branch master
nothing to commit, working tree clean
My Git Machine $

Git remame is equivalent to:

However, this is equivalent to running something like this:

$ mv old_file New_file
$ git rm old_file
$ git add New_file


=========================

Viewing the Commit History
In order to see what you have commited so far, you can use gi log command.

My Git Machine $ git log
commit 816d68d7c16410fae05b7dbf57e5c7d87d96c45b (HEAD -> master)
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 14:06:05 2023 +0530

    Rename the file

commit efe521c855a1024fe932f6ee517c86c1561d7384
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 14:05:17 2023 +0530

    Addd olf fil

commit d9f376b3aabf55bc806e056322730134b5a22020
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 13:58:38 2023 +0530

    modified .gitignore

commit 3ff64933c6097c1602fca840bff8ef4559c23e16
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 13:57:47 2023 +0530

    Added .gitignore

commit a363eb531e2f59695e78a587e0be670a347036ed
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 13:56:28 2023 +0530

    the file asd is gone from the repository

commit 259702935bca44d7e55dc12060581cc12a167774


One of the more helpful options is -p or --patch, which shows the difference introduced in each commit. 
You can also limit the number of log entries displayed, such as using -2 to show only the last two entries.

My Git Machine $ git log -p -2
commit 816d68d7c16410fae05b7dbf57e5c7d87d96c45b (HEAD -> master)
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 14:06:05 2023 +0530

    Rename the file

diff --git a/old_file b/New_file
similarity index 100%
rename from old_file
rename to New_file

commit efe521c855a1024fe932f6ee517c86c1561d7384
Author: Kumar Saurabh <discover.devops@gmail.com>
Date:   Mon Jan 2 14:05:17 2023 +0530

    Addd olf fil

diff --git a/old_file b/old_file
new file mode 100644
index 0000000..e69de29
My Git Machine $

This is very helpful for code review or to quickly browse what happened during a series of commits 
that a collaborator has added.

You can also use a series of summarizing options with git log. For example, if you want to see some 
abbreviated stats for each commit, you can use the --stat option: